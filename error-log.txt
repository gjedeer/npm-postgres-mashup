
ERROR: package.insert()   PACKAGE: grunt-file-cleaner   TIME: "2014-03-21T19:44:07.037Z"
{
  "sql": "insert into \"package\" (\"_rev\", \"package_name\", \"readme\", \"readme_filename\", \"time_created\", \"time_modified\", \"version_latest\", \"version_rc\") values (?, ?, ?, ?, ?, ?, ?, ?)",
  "bindings": [
    "7-318c611a575fae66926011c9ceca6392",
    "grunt-file-cleaner",
    "# grunt-file-cleaner\n\n> Cleans files with invalid charaacters.\n\n## Getting Started\nThis plugin requires Grunt `~0.4.2`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-file-cleaner --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-file-cleaner');\n```\n\n## The \"clean\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `clean` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  file_cleaner: {\n    your_target: {\n      // Target-specific file lists and/or options go here.\n    },\n  },\n})\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n0.1.0 - Initial Release\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000",
    "README.md",
    "2014-02-19T12:22:37.885-06:00",
    "2014-02-19T12:26:52.672-06:00",
    "0.1.1",
    null
  ],
  "clientError": {
    "name": "RejectionError",
    "message": "invalid byte sequence for encoding \"UTF8\": 0x00",
    "cause": {
      "name": "error",
      "length": 129,
      "severity": "ERROR",
      "code": "22021",
      "file": "src\\backend\\utils\\mb\\wchar.c",
      "line": "2020",
      "routine": "report_invalid_encoding"
    },
    "stack": "error: invalid byte sequence for encoding \"UTF8\": 0x00\n    at Connection.parseE (D:\\Dropbox\\Node\\npm-postgres-mashup\\node_modules\\pg\\lib\\connection.js:561:11)\n    at Connection.parseMessage (D:\\Dropbox\\Node\\npm-postgres-mashup\\node_modules\\pg\\lib\\connection.js:390:17)\n    at null.<anonymous> (D:\\Dropbox\\Node\\npm-postgres-mashup\\node_modules\\pg\\lib\\connection.js:98:18)\n    at Socket.EventEmitter.emit (events.js:95:17)\n    at Socket.<anonymous> (_stream_readable.js:746:14)\n    at Socket.EventEmitter.emit (events.js:92:17)\n    at emitReadable_ (_stream_readable.js:408:10)\n    at emitReadable (_stream_readable.js:404:5)\n    at readableAddChunk (_stream_readable.js:165:9)\n    at Socket.Readable.push (_stream_readable.js:127:10)"
  }
}